---
layout: post
title:  "OOP와 디자인 패턴구조 -1"
#date:   2019-01-18 08:43:59
categories: devlog
tags : theory
---

### OOP
- Object Oriented Programming
- 프로그래밍 방범론으로 객체 지향 프로그래밍을 말한다.<br/>
1) 추상화 (abstraction)<br/>
2) 상속 (Inheritance)<br/>
3) 캡슐화, 은닉화 (Encapsulation)<br/>
4) 다형성 (Polymorphism)<br/>

### 디자인 패턴 (Design Patterns)
- 검증된 프로그래밍 패턴
- 문제의 타입별로 해결하기 좋은 프로그래밍 패턴

- GoF 디자인 패턴 : s/w 개발영역에서 디자인 패턴을 구체화하고 체계화한 사람들이다. 23가지의 디자인 패턴을 생성, 구조, 행위 3가지 패턴으로 분류하였다.

- OOP와 디자인 패턴은 직접적인 관련은 없으나, 프로그램 방시이 매우 잘어울려 같이 등장하곤 한다. 객체의 변이성 때문인데, 객체는 생성되고, 성질과 값을 부여받고, 수행 후 소멸한다. <br/>
`객체 - 생성, 값 부여, 수행, 소멸`하는 변이성 특징이 디자인 패턴에 매우 잘어울린다.<br/>

1. 생성 패턴
  - 객체의 생성에 대한 방법
  - 객체의 생성을 캡슐화하여 특정 객체가 생성,변경되어도 프로그램 구조에 영향받지 않도록 유연성을 제공한다.
2. 구조 패턴
  - 객체와 객체 사이의 상속/조합 관계설정 방법
  - 클래스나 객체를 조합하여 더 큰 구조를 만드는 패턴
3. 행위 패턴
  - 객체가 특정 행동을 함으로서 다른 객체에서 값을 전달하는 방법
  - 객체나 클래스 사이에 책임을 분배하여, 객체 사이의 결합도 최소화하는것에 중점을 둔다.

<img src="{{ site.baseurl }}/assets/images/20190119/design1.JPG" title="디자인 패턴의 종류">

### 디자인 패턴의 종류에 대한 간략한 설명
#### 생성 패턴
- `싱글톤(singleton)` : 전역 변수를 사용하지 않고, 객체를 하나만 생성하도록 하며, 생성된 객체를 어디서든 참조할 수 있도록 하는 패턴
- 추상 팩토리 : 구체적인 클래스에 의존하지 않고 서로 연관되거나 의존적인 객체들의 조합을 만드는 <strong>인터페이스를 제공</strong>하는 패턴
- `팩토리 메서드` : 객체 생성 처리를 서브 클래스로 분리해 처리하도록 캡슐화하는 패턴

#### 구조 패턴
- `컴퍼지트(composite)` : 여러 개의 객체들로 구성된 복합 객체와 단일 객체를 클라이언트에서 구별없이 다루게 해주는 패턴
- 데커레이터(decorator) : 객체 결합을 통해 기능을 동적으로 유연하게 확장할 수 있게 해주는 패턴

#### 행위 패턴
- `옵서버(Observer)` : 한 객체의 변화에 따라 다른 객체의 상태도 연동되도록 일대다 객체 의존관계를 구성하는 패턴
- 스테이트(state) : 객체의 상태에 따라 객체 행위 내용을 변경해주는 패턴
- `스트래티지(strategy)` : 행위를 클래스로 캡슐화해 동적으로 행위를 자유롭게 바꿀 수 있게 해주는 패턴
- `커맨드(command)` : 실행될 기능을 캡슐화함으로써 주어진 여러 기능을 실행 할 수 있는 재사용성이 높은 클래스를 설계하는 패턴
- `템플릿 메서드(template method)` : 어떤 작업을 처리하는 일부분을 서브 클래스로 캡슐화해 전체 일을 수행하는 구조는 바꾸지 않으면서 특정 단계에서 수행하는 내역을 바꾸는 패턴

참고
- [Design Pattern 디자인 패턴 종류][reference link1]
- [자바 OOP와 디자인 패턴 - IDEO][reference link2]


[reference link1]: https://gmlwjd9405.github.io/2018/07/06/design-pattern.html
[reference link2]: http://blog.naver.com/PostView.nhn?blogId=2feelus&logNo=220642212134&redirect=Dlog&widgetTypeCall=true
